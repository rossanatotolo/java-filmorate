DROP TABLE IF EXISTS films, mpa, genres, film_genres, users, likes, friends;

CREATE TABLE if not EXISTS mpa (
  mpa_id integer GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
  mpa_name varchar(200) NOT NULL
);

CREATE TABLE if not EXISTS films (
    film_id integer GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    name varchar(255) NOT NULL,
    description varchar(200),
    release_date date NOT NULL,
    duration integer NOT NULL,
    mpa_id integer REFERENCES mpa (mpa_id)
);

CREATE TABLE if not EXISTS genres (
  genre_id integer GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
  genre_name varchar(200) NOT NULL
);

CREATE TABLE if not EXISTS film_genres (
  film_id integer REFERENCES films (film_id) NOT NULL,
  genre_id integer REFERENCES genres (genre_id) NOT NULL,
  CONSTRAINT unique_pair UNIQUE (film_id, genre_id)
);

CREATE TABLE if not EXISTS users (
  user_id integer GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
  email varchar(255) NOT NULL,
  login varchar(300) NOT NULL,
  name varchar(255),
  birthday date NOT NULL,
  CONSTRAINT uc_Users_email UNIQUE (email),
  CONSTRAINT uc_Users_login UNIQUE (login)
);

CREATE TABLE if not EXISTS friends (
  user_id integer REFERENCES users (user_id) NOT NULL,
  friend_id integer REFERENCES users (user_id) NOT NULL,
  CONSTRAINT "friends_pk"
        PRIMARY KEY (user_id, friend_id)
);

CREATE TABLE if not EXISTS likes (
  film_id integer REFERENCES films (film_id) NOT NULL,
  user_id integer REFERENCES users (user_id) NOT NULL,
  CONSTRAINT "likes_pk"
        PRIMARY KEY (user_id , film_id)
);
